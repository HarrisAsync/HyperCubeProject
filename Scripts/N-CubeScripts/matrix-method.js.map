{"version":3,"sources":["../../src/scripts/matrix-method.js"],"names":["Matrix","input","matrix","from","height","length","width","prototype","add","y","x","subtract","scale","factor","dot","result","new","size","n","sum","transpose","Array","Float32Array","identity","dimension"],"mappings":"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","file":"matrix-method.js","sourcesContent":["/*\r\n\r\n\r\n\r\nTHIS FILE HAS BEEN REPLACED WITH MATRIX.JS\r\nBECAUSE USING STATIC METHODS AND ARRAYS IS MORE EFFICIENT THAN CREATING MATRIX OBJECTS EACH TIME\r\n\r\n\r\n\r\n*/\r\n\r\n/*\r\nNote:\r\nAccording to https://jsperf.com/js-nested-vs-flat-array-retrieve-values/\r\nIt is faster to use nested 2D arrays than flattened 2D arrays, even with TypedArrays\r\nSo I'll be using [Float32Array(n), ..., Float32Array(n)] rather than Float32Array(n*n)\r\n*/\r\n\r\n//\r\n// High-perf matrix library\r\n//\r\nfunction Matrix(input) {\r\n\tthis.matrix = Matrix.from(input)\r\n\tthis.height = this.matrix.length\r\n\tthis.width = this.matrix[0].length\r\n}\r\n\r\n// Mathods (get it ??? coz it does math ???\r\n\r\nMatrix.prototype.add = function(input) {\r\n\tif (this.width !== input.width || this.height !== input.height) {\r\n\t\tthrow 'Incompatible matrices'\r\n\t}\r\n\r\n\tlet y, x\r\n\tfor (y=0; y<this.height; y++) {\r\n\t\tfor (x=0; x<this.width; x++) {\r\n\t\t\tthis.matrix[y][x] += input.matrix[y][x]\r\n\t\t}\r\n\t}\r\n}\r\n\r\nMatrix.prototype.subtract = function(input) {\r\n\tif (this.width !== input.width || this.height !== input.height) {\r\n\t\tthrow 'Incompatible matrices'\r\n\t}\r\n\r\n\tlet y, x\r\n\tfor (y=0; y<this.height; y++) {\r\n\t\tfor (x=0; x<this.width; x++) {\r\n\t\t\tthis.matrix[y][x] -= input.matrix[y][x]\r\n\t\t}\r\n\t}\r\n}\r\n\r\nMatrix.prototype.scale = function(factor) {\r\n\tlet y, x\r\n\tfor (y=0; y<this.height; y++) {\r\n\t\tfor (x=0; x<this.width; x++) {\r\n\t\t\tthis.matrix[y][x] *= factor\r\n\t\t}\r\n\t}\r\n}\r\n\r\nMatrix.prototype.dot = function(input) {\r\n\tif (this.width !== input.height) {\r\n\t\tthrow 'Incompatible matrices'\r\n\t}\r\n\r\n\tlet result = Matrix.new(this.height, input.width)\r\n\tlet size = this.width\r\n\r\n\tlet y, x, n, sum\r\n\tfor (y=0; y<this.height; y++) {\r\n\t\tfor (x=0; x<input.width; x++) {\r\n\t\t\tsum = 0\r\n\t\t\tfor (n=0; n<size; n++) {\r\n\t\t\t\tsum += this.matrix[y][n] * input.matrix[n][x]\r\n\t\t\t}\r\n\t\t\tresult[y][x] = sum\r\n\t\t}\r\n\t}\r\n\r\n\tthis.matrix = result\r\n\tthis.width = input.width\r\n}\r\n\r\nMatrix.prototype.transpose = function() {\r\n\tlet result = Matrix.new(this.width, this.height)\r\n\r\n\tlet y, x\r\n\tfor (y=0; y<this.width; y++) {\r\n\t\tfor (x=0; x<this.height; x++) {\r\n\t\t\tresult[y][x] = this.matrix[x][y]\r\n\t\t}\r\n\t}\r\n\r\n\tlet height = this.height // Temp variable\r\n\t\r\n\tthis.matrix = result\r\n\tthis.height = this.width\r\n\tthis.width = height\r\n}\r\n\r\n\r\n\r\n// Static methods\r\n\r\nMatrix.from = function(input) {\r\n\t// I'm assuming the user did not make any mistakes inputting the array\r\n\t// Normally each layer should have the same length\r\n\tconst height = input.length\r\n\tconst width = input[0].length\r\n\r\n\t// Create a new high-perf matrix\r\n\tlet matrix = new Array(height)\r\n\t\r\n\t// Init the matrix with the input values\r\n\tlet y, x\r\n\tfor (y=0; y<height; y++) {\r\n\t\tmatrix[y] = Float32Array.from(input[y])\r\n\t}\r\n\r\n\t// Return the result\r\n\treturn matrix\r\n}\r\n\r\nMatrix.new = function(height, width) {\r\n\tlet matrix = new Array(height)\r\n\r\n\tlet y\r\n\tfor (y=0; y<height; y++) {\r\n\t\tmatrix[y] = new Float32Array(width)\r\n\t}\r\n\r\n\treturn matrix\r\n}\r\n\r\nMatrix.identity = function(dimension) {\r\n\tlet matrix = new Array(dimension)\r\n\r\n\tlet y\r\n\tfor (y=0; y<dimension; y++) {\r\n\t\tmatrix[y] = new Float32Array(dimension)\r\n\t\tmatrix[y][y] = 1\r\n\t}\r\n\r\n\treturn matrix\r\n}\r\n\r\n\r\n\r\n//\r\n// Test units\r\n//\r\n\r\n// const matrix1 = new Matrix([[1, 2, 3], [4, 5, 6]])\r\n// matrix1.scale(2)\r\n// const matrix2 = new Matrix([[1, 2], [1, 2], [1, 2]])\r\n// matrix2.scale(-1)\r\n\r\n// const matrix3 = new Matrix(matrix1.matrix)\r\n// matrix3.dot(matrix2)\r\n\r\n// console.log(matrix1.matrix, matrix2.matrix, matrix3.matrix)"]}