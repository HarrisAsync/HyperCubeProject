{"version":3,"sources":["../../src/scripts/vertex.js"],"names":["getVertices","dimension","n","Math","pow","vertices","Array","vertex","i","toString","length","split","j","parseInt","Matrix","from"],"mappings":";;AAAA;AACA;AACA;;AAEA;;;;;;;;;;;;AAYA,SAASA,WAAT,CAAqBC,SAArB,EAAgC;;AAE/B,KAAMC,IAAIC,KAAKC,GAAL,CAAS,CAAT,EAAYH,SAAZ,CAAV;AACA,KAAII,WAAW,IAAIC,KAAJ,CAAUJ,CAAV,CAAf;AACA,KAAIK,eAAJ;;AAEA,MAAK,IAAIC,IAAE,CAAX,EAAcA,IAAEL,KAAKC,GAAL,CAAS,CAAT,EAAYH,SAAZ,CAAhB,EAAwCO,GAAxC,EAA6C;AAC5C;AACAD,WAASC,EAAEC,QAAF,CAAW,CAAX,CAAT;;AAEA;AACA;;;;;AAKA,SAAOF,OAAOG,MAAP,GAAgBT,SAAvB,EAAkC;AACjCM,kBAAaA,MAAb;AACA;;AAED;AACA;AACAA,WAASA,OAAOI,KAAP,CAAa,EAAb,CAAT;AACA,OAAK,IAAIC,IAAE,CAAX,EAAcA,IAAEL,OAAOG,MAAvB,EAA+BE,GAA/B,EAAoC;AACnCL,UAAOK,CAAP,IAAYC,SAASN,OAAOK,CAAP,CAAT,MAAwB,CAAxB,GAA4B,CAAC,CAA7B,GAAiC,CAA7C;AACA;;AAED;AACAP,WAASG,CAAT,IAAcD,MAAd;AACA;;AAED;AACA,QAAOO,OAAOC,IAAP,CAAYV,QAAZ,CAAP;AACA","file":"vertex.js","sourcesContent":["//\r\n// Vertices\r\n// \r\n\r\n/*\r\nNote:\r\nGenerating all the vertices is similar to counting up in binary\r\nBy incrementing the binary number by 1 each time until 2^{dimensions},\r\nwe are sure to hit every possible combinations of 1's and 0's in {dimensions} places\r\nExample:\r\n0 --> 00 --> -1, -1, -1\r\n1 --> 01 --> -1, -1, 1\r\n2 --> 10 --> -1, 1, -1\r\n3 --> 11 --> -1, 1, 1\r\n*/\r\n\r\nfunction getVertices(dimension) {\r\n\r\n\tconst n = Math.pow(2, dimension)\r\n\tlet vertices = new Array(n)\r\n\tlet vertex\r\n\r\n\tfor (let i=0; i<Math.pow(2, dimension); i++) {\r\n\t\t// Generate binary number\r\n\t\tvertex = i.toString(2)\r\n\t\t\r\n\t\t// Add leading 0's\r\n\t\t/*\r\n\t\tNote:\r\n\t\tIn base 2, the number of digits we need to encode the number is log2(n)\r\n\t\tHere, we have log2(2^{dimensions}) = {dimensions}\r\n\t\t*/\r\n\t\twhile (vertex.length < dimension) {\r\n\t\t\tvertex = `0${vertex}`\r\n\t\t}\r\n\r\n\t\t// Generate the vertex by splitting then substituting 0 --> -1, 1 --> 1\r\n\t\t// I could use array.forEach, but that's not supported in all browsers...\r\n\t\tvertex = vertex.split('')\r\n\t\tfor (let j=0; j<vertex.length; j++) {\r\n\t\t\tvertex[j] = parseInt(vertex[j]) === 0 ? -1 : 1\r\n\t\t}\r\n\r\n\t\t// Add the vertex to the list of vertices\r\n\t\tvertices[i] = vertex\r\n\t}\r\n\r\n\t// Convert to matrix\r\n\treturn Matrix.from(vertices)\r\n}"]}