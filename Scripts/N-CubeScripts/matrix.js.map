{"version":3,"sources":["../../src/scripts/matrix.js"],"names":["Matrix","input","from","add","m1","m2","m1height","length","m1width","m2height","m2width","result","new","y","x","subtract","dot","size","n","sum","scale","m","factor","mheight","mwidth","transpose","height","width","matrix","Array","Float32Array","identity","dimension"],"mappings":"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","file":"matrix.js","sourcesContent":["/*\r\nNote:\r\nAccording to https://jsperf.com/js-nested-vs-flat-array-retrieve-values/\r\nIt is faster to use nested 2D arrays than flattened 2D arrays, even with TypedArrays\r\nSo I'll be using [Float32Array(n), ..., Float32Array(n)] rather than Float32Array(n*n)\r\n*/\r\n\r\n/*\r\nThis library is NOT robust, at all\r\nI'm assuming the user did not make any mistakes inputting the array\r\nNormally each layer should have the same length\r\nThat way I can read the matrix dimensions from m.length and m[0].length\r\n*/\r\n\r\n/*\r\nTODO:\r\n- Make a vector class that ties in neatly with the matrix class\r\n*/\r\n\r\n//\r\n// High-perf static matrix library\r\n//\r\n\r\nfunction Matrix(input) { return Matrix.from(input) }\r\n\r\n\r\nMatrix.add = function(m1, m2) {\r\n\tconst m1height = m1.length, m1width = m1[0].length\r\n\tconst m2height = m2.length, m2width = m2[0].length\r\n\r\n\tif (m1width !== m2width || m1height !== m2height) {\r\n\t\tthrow 'Incompatible matrices'\r\n\t}\r\n\r\n\tlet result = Matrix.new(m1height, m1width)\r\n\tlet y, x\r\n\r\n\tfor (y=0; y<m1height; y++) {\r\n\t\tfor (x=0; x<m1width; x++) {\r\n\t\t\tresult[y][x] = m1[y][x] + m2[y][x]\r\n\t\t}\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n\r\nMatrix.subtract = function(m1, m2) {\r\n\tconst m1height = m1.length, m1width = m1[0].length\r\n\tconst m2height = m2.length, m2width = m2[0].length\r\n\r\n\tif (m1width !== m2width || m1height !== m2height) {\r\n\t\tthrow 'Incompatible matrices'\r\n\t}\r\n\r\n\tlet result = Matrix.new(m1height, m1width)\r\n\tlet y, x\r\n\r\n\tfor (y=0; y<m1height; y++) {\r\n\t\tfor (x=0; x<m1width; x++) {\r\n\t\t\tresult[y][x] = m1[y][x] - m2[y][x]\r\n\t\t}\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n\r\nMatrix.dot = function(m1, m2) {\r\n\tconst m1height = m1.length, m1width = m1[0].length\r\n\tconst m2height = m2.length, m2width = m2[0].length\r\n\r\n\tif (m1width !== m2height) {\r\n\t\tthrow 'Incompatible matrices'\r\n\t}\r\n\r\n\tlet result = Matrix.new(m1height, m2width)\r\n\tlet size = m1width\r\n\tlet y, x, n, sum\r\n\r\n\tfor (y=0; y<m1height; y++) {\r\n\t\tfor (x=0; x<m2width; x++) {\r\n\t\t\tsum = 0\r\n\t\t\tfor (n=0; n<size; n++) {\r\n\t\t\t\tsum += m1[y][n] * m2[n][x]\r\n\t\t\t}\r\n\t\t\tresult[y][x] = sum\r\n\t\t}\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n\r\nMatrix.scale = function(m, factor) {\r\n\tconst mheight = m.length, mwidth = m[0].length\r\n\r\n\tlet result = Matrix.new(mheight, mwidth)\r\n\tlet y, x\r\n\r\n\tfor (y=0; y<mheight; y++) {\r\n\t\tfor (x=0; x<mwidth; x++) {\r\n\t\t\tresult[y][x] = m[y][x] * factor\r\n\t\t}\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n\r\nMatrix.transpose = function(m) {\r\n\tconst height = m.length, width = m[0].length\r\n\r\n\tlet result = Matrix.new(width, height)\r\n\tlet y, x\r\n\r\n\tfor (y=0; y<width; y++) {\r\n\t\tfor (x=0; x<height; x++) {\r\n\t\t\tresult[y][x] = m[x][y]\r\n\t\t}\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n\r\nMatrix.from = function(input) {\r\n\tconst height = input.length\r\n\tconst width = input[0].length\r\n\r\n\tlet matrix = new Array(height)\r\n\tlet y, x\r\n\r\n\tfor (y=0; y<height; y++) {\r\n\t\tmatrix[y] = Float32Array.from(input[y])\r\n\t}\r\n\r\n\t// Return the result\r\n\treturn matrix\r\n}\r\n\r\n\r\nMatrix.new = function(height, width) {\r\n\tlet matrix = new Array(height)\r\n\tlet y\r\n\r\n\tfor (y=0; y<height; y++) {\r\n\t\tmatrix[y] = new Float32Array(width)\r\n\t}\r\n\r\n\treturn matrix\r\n}\r\n\r\n\r\nMatrix.identity = function(dimension) {\r\n\tlet matrix = new Array(dimension)\r\n\tlet y\r\n\r\n\tfor (y=0; y<dimension; y++) {\r\n\t\tmatrix[y] = new Float32Array(dimension)\r\n\t\tmatrix[y][y] = 1\r\n\t}\r\n\r\n\treturn matrix\r\n}"]}